name: Build luci-app-kidcontrol for 360T7

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: luci-app-kidcontrol
  TARGET_ARCH: "aarch64_cortex-a53"

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 60

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          flex \
          bison \
          g++ \
          gawk \
          gcc-multilib \
          gettext \
          git \
          libncurses5-dev \
          libssl-dev \
          python3 \
          python3-pip \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          wget \
          curl

    - name: Download OpenWrt SDK for 360T7
      run: |
        # ‰ΩøÁî®23.05.3Á®≥ÂÆöÁâàSDK
        SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/mediatek/filogic/openwrt-sdk-23.05.3-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading SDK: $SDK_URL"
        if wget --timeout=30 --tries=3 "$SDK_URL" -O sdk.tar.xz; then
          echo "‚úÖ SDK downloaded successfully"
        else
          echo "‚ùå SDK download failed, trying mirror..."
          # Â∞ùËØïÈïúÂÉèÁ´ô
          MIRROR_URL="https://mirror-03.infra.openwrt.org/releases/23.05.3/targets/mediatek/filogic/openwrt-sdk-23.05.3-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          wget "$MIRROR_URL" -O sdk.tar.xz || exit 1
        fi
        
        # Ëß£ÂéãSDK
        tar -xf sdk.tar.xz
        SDK_DIR=$(tar -tf sdk.tar.xz | head -1 | cut -f1 -d"/")
        mv "$SDK_DIR" openwrt-sdk
        rm -f sdk.tar.xz
        echo "SDK ready"

    - name: Prepare package files
      run: |
        # È¶ñÂÖàÂàóÂá∫ÂΩìÂâçÁõÆÂΩïÂÜÖÂÆπ
        echo "Current directory contents:"
        pwd
        ls -la
        
        # ÂàõÂª∫ÁõÆÊ†áÁõÆÂΩï
        mkdir -p openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}
        
        # Á≤æÁ°ÆÂ§çÂà∂Êñá‰ª∂ÔºåÈÅøÂÖçÂæ™ÁéØÂ§çÂà∂
        echo "Copying specific files..."
        
        # Â§çÂà∂MakefileÔºàÂøÖÈ°ªÔºâ
        if [ -f "Makefile" ]; then
          cp Makefile openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}/
          echo "‚úÖ Copied Makefile"
        fi
        
        # Â§çÂà∂ÂÖ∂‰ªñÂ∏∏ËßÅÊñá‰ª∂
        for file in README.md LICENSE Changelog *.mk; do
          if [ -f "$file" ]; then
            cp "$file" openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}/
            echo "‚úÖ Copied $file"
          fi
        done
        
        # Â§çÂà∂ÁõÆÂΩï
        for dir in src root test luasrc; do
          if [ -d "$dir" ]; then
            cp -r "$dir" openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}/
            echo "‚úÖ Copied directory: $dir"
          fi
        done
        
        echo "Final package contents:"
        ls -la openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}/

    - name: Verify Makefile
      run: |
        cd openwrt-sdk/package/network/services/${{ env.PACKAGE_NAME }}
        if [ ! -f "Makefile" ]; then
          echo "‚ùå Error: Makefile not found!"
          echo "Current directory: $(pwd)"
          ls -la
          exit 1
        fi
        echo "‚úÖ Makefile verified"
        echo "Makefile content:"
        cat Makefile

    - name: Update feeds
      run: |
        cd openwrt-sdk
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure build
      run: |
        cd openwrt-sdk
        make defconfig
        echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" >> .config
        make defconfig
        echo "Build configured"

    - name: Compile package
      run: |
        cd openwrt-sdk
        echo "Starting compilation..."
        make package/network/services/${{ env.PACKAGE_NAME }}/compile V=s -j$(nproc)

    - name: Find and collect IPK
      run: |
        cd openwrt-sdk
        echo "Searching for IPK file..."
        
        # Âú®Â§ö‰∏™‰ΩçÁΩÆÊü•Êâæ
        IPK_LOCATIONS=(
          "bin/packages/*/${{ env.PACKAGE_NAME }}*.ipk"
          "bin/targets/*/packages/${{ env.PACKAGE_NAME }}*.ipk"
          "bin/*/packages/*/${{ env.PACKAGE_NAME }}*.ipk"
        )
        
        for pattern in "${IPK_LOCATIONS[@]}"; do
          IPK_FILE=$(find . -path "$pattern" 2>/dev/null | head -n 1)
          if [ -f "$IPK_FILE" ]; then
            echo "‚úÖ Found IPK: $IPK_FILE"
            mkdir -p ../output
            cp "$IPK_FILE" ../output/
            break
          fi
        done
        
        if [ ! -f "../output/"*.ipk ]; then
          echo "‚ùå IPK not found"
          echo "All files in bin directory:"
          find . -name "*.ipk" | head -10
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-360t7
        path: output/*.ipk

    - name: Show success
      run: |
        echo "=========================================="
        echo "‚úÖ Build completed successfully!"
        echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
        echo "üéØ For: 360T7 (MT7981)"
        echo "üìÅ IPK available in artifacts"
        echo "=========================================="
