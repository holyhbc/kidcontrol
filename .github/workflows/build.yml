name: Build luci-app-kidcontrol

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: luci-app-kidcontrol
  OPENWRT_VERSION: "24.10.1"
  TARGET: "mediatek/filogic"
  SUBTARGET: "mt7981"

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        path: source-code

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          flex \
          bison \
          g++ \
          gawk \
          gcc-multilib \
          gettext \
          git \
          libncurses5-dev \
          libssl-dev \
          python3 \
          python3-pip \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          wget \
          curl \
          subversion

    - name: Clone OpenWrt source
      run: |
        git clone https://github.com/openwrt/openwrt.git openwrt-source
        cd openwrt-source
        git checkout v${{ env.OPENWRT_VERSION }}

    - name: Copy package files
      run: |
        cd $GITHUB_WORKSPACE
        # 查找并复制包文件
        if [ -d "source-code" ]; then
          mkdir -p openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}
          cp -r source-code/* openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/
          echo "✅ Files copied from source-code/"
        else
          # 备用方案：直接使用当前目录
          mkdir -p openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}
          cp -r * openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/
          echo "✅ Files copied from workspace root"
        fi
        
        echo "Package contents:"
        ls -la openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/

    - name: Setup minimal configuration
      run: |
        cd $GITHUB_WORKSPACE/openwrt-source
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 最小化配置，避免编译不必要的包
        echo "CONFIG_TARGET_mediatek=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic_${{ env.SUBTARGET }}=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic_${{ env.SUBTARGET }}_360t7=y" >> .config
        echo "CONFIG_PACKAGE_luci=y" >> .config
        echo "CONFIG_PACKAGE_nftables=y" >> .config
        echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" >> .config
        echo "CONFIG_ALL_NONSHARED=n" >> .config
        echo "CONFIG_ALL_KMODS=n" >> .config
        echo "CONFIG_ALL=n" >> .config
        echo "CONFIG_AUTOREMOVE=y" >> .config
        
        make defconfig

    - name: Download only required sources
      run: |
        cd $GITHUB_WORKSPACE/openwrt-source
        # 只下载必要的包，避免编译整个系统
        make toolchain/install -j$(nproc)
        make package/nftables/download
        make package/luci/download
        make package/network/services/${{ env.PACKAGE_NAME }}/download

    - name: Build with simplified approach
      run: |
        cd $GITHUB_WORKSPACE/openwrt-source
        echo "Building with simplified approach..."
        
        # 方法1：尝试直接编译我们的包（让make自动处理依赖）
        make package/network/services/${{ env.PACKAGE_NAME }}/compile V=s -j1

    - name: Alternative build method
      if: failure()
      run: |
        cd $GITHUB_WORKSPACE/openwrt-source
        echo "Trying alternative build method..."
        
        # 清除之前的编译结果
        rm -rf build_dir/target-*/linux-mediatek_filogic/package/network/services/${{ env.PACKAGE_NAME }}
        
        # 使用更详细的输出和单线程编译
        make package/network/services/${{ env.PACKAGE_NAME }}/clean
        make package/network/services/${{ env.PACKAGE_NAME }}/compile V=sc -j1

    - name: Find compiled package
      run: |
        cd $GITHUB_WORKSPACE/openwrt-source
        echo "Searching for IPK files..."
        
        # 在多个可能的位置查找
        IPK_FILE=$(find bin -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        
        if [ -z "$IPK_FILE" ]; then
          IPK_FILE=$(find bin/packages -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        fi
        
        if [ -z "$IPK_FILE" ]; then
          IPK_FILE=$(find bin/targets -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        fi
        
        if [ -f "$IPK_FILE" ]; then
          echo "✅ Found: $IPK_FILE"
          mkdir -p $GITHUB_WORKSPACE/output
          cp "$IPK_FILE" $GITHUB_WORKSPACE/output/
        else
          echo "❌ No IPK file found"
          echo "Searching all IPK files:"
          find . -name "*.ipk" | head -20
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-ipk
        path: output/*.ipk

    - name: Show build result
      run: |
        if ls $GITHUB_WORKSPACE/output/*.ipk 1> /dev/null 2>&1; then
          echo "=========================================="
          echo "✅ Build successful!"
          echo "📦 Package: ${{ env.PACKAGE_NAME }}"
          echo "🎯 For: 360T7 (MT7981)"
          echo "📁 IPK file available in artifacts"
          echo "=========================================="
        else
          echo "❌ Build failed"
          exit 1
        fi
