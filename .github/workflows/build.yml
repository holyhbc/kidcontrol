name: Build luci-app-kidcontrol for 360T7

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: luci-app-kidcontrol
  TARGET_ARCH: "aarch64_cortex-a53"  # 360T7ÁöÑÊû∂ÊûÑ

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 60

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          flex \
          bison \
          g++ \
          gawk \
          gcc-multilib \
          gettext \
          git \
          libncurses5-dev \
          libssl-dev \
          python3 \
          python3-pip \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          wget \
          curl

    - name: Download OpenWrt SDK for 360T7
      run: |
        # 360T7 (MT7981) ÂèØÁî®ÁöÑSDKÈìæÊé•
        # Â∞ùËØïÂ§ö‰∏™ÁâàÊú¨ÂíåÈïúÂÉèÊ∫ê
        
        SDK_URLS=(
          "https://downloads.openwrt.org/releases/23.05.3/targets/mediatek/filogic/openwrt-sdk-23.05.3-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          "https://mirror-03.infra.openwrt.org/releases/23.05.3/targets/mediatek/filogic/openwrt-sdk-23.05.3-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
          "https://downloads.openwrt.org/snapshots/targets/mediatek/filogic/openwrt-sdk-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        )
        
        for SDK_URL in "${SDK_URLS[@]}"; do
          echo "Trying: $SDK_URL"
          if wget --timeout=30 --tries=2 "$SDK_URL" -O sdk.tar.xz; then
            echo "‚úÖ SDK downloaded successfully"
            echo "SDK_URL=$SDK_URL" >> $GITHUB_ENV
            break
          else
            echo "‚ùå Download failed, trying next..."
            rm -f sdk.tar.xz
          fi
        done
        
        if [ ! -f "sdk.tar.xz" ]; then
          echo "‚ùå All SDK downloads failed"
          exit 1
        fi
        
        # Ëß£ÂéãSDK
        tar -xf sdk.tar.xz
        SDK_DIR=$(tar -tf sdk.tar.xz | head -1 | cut -f1 -d"/")
        mv "$SDK_DIR" openwrt-sdk
        rm -f sdk.tar.xz
        echo "SDK extracted to: openwrt-sdk"

    - name: Prepare package in SDK
      run: |
        cd openwrt-sdk
        echo "SDK structure:"
        ls -la
        
        # ÂàõÂª∫ÂåÖÁõÆÂΩï
        mkdir -p package/network/services/${{ env.PACKAGE_NAME }}
        
        # Â§çÂà∂ÊâÄÊúâÊñá‰ª∂
        cp -r $GITHUB_WORKSPACE/* package/network/services/${{ env.PACKAGE_NAME }}/
        
        # Ê∏ÖÁêÜ‰∏çÂøÖË¶ÅÁöÑÊñá‰ª∂
        cd package/network/services/${{ env.PACKAGE_NAME }}
        rm -rf .git .github .gitignore 2>/dev/null || true
        
        echo "Package contents:"
        ls -la

    - name: Update feeds
      run: |
        cd openwrt-sdk
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure for package build
      run: |
        cd openwrt-sdk
        # ÁîüÊàêÈªòËÆ§ÈÖçÁΩÆ
        make defconfig
        
        # ÂêØÁî®Êàë‰ª¨ÁöÑÂåÖ
        echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" >> .config
        make defconfig
        
        echo "Configuration:"
        grep "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}" .config

    - name: Compile package
      run: |
        cd openwrt-sdk
        echo "Compiling package..."
        
        # ÁºñËØëÂåÖ
        make package/network/services/${{ env.PACKAGE_NAME }}/compile V=s -j$(nproc)

    - name: Find compiled IPK
      run: |
        cd openwrt-sdk
        echo "Searching for IPK files..."
        
        # Êü•ÊâæIPKÊñá‰ª∂
        IPK_PATH=$(find . -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        
        if [ -f "$IPK_PATH" ]; then
          echo "‚úÖ Found IPK: $IPK_PATH"
          mkdir -p $GITHUB_WORKSPACE/output
          cp "$IPK_PATH" $GITHUB_WORKSPACE/output/
          
          # ÊòæÁ§∫IPK‰ø°ÊÅØ
          echo "IPK architecture:"
          ar t "$IPK_PATH" || true
        else
          echo "‚ùå IPK not found"
          echo "Available IPK files:"
          find . -name "*.ipk" | head -10
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-360t7
        path: output/*.ipk

    - name: Show success message
      run: |
        echo "=========================================="
        echo "‚úÖ Build successful for 360T7!"
        echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
        echo "üéØ Architecture: ${{ env.TARGET_ARCH }}"
        echo "üìÅ IPK file available in artifacts"
        echo "=========================================="
