name: Build luci-app-kidcontrol

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: luci-app-kidcontrol
  OPENWRT_VERSION: "24.10.1"
  TARGET: "mediatek/filogic"
  SUBTARGET: "mt7981"

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 90

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          clang \
          flex \
          bison \
          g++ \
          gawk \
          gcc-multilib \
          gettext \
          git \
          libncurses5-dev \
          libssl-dev \
          python3 \
          python3-pip \
          rsync \
          unzip \
          zlib1g-dev \
          file \
          wget \
          curl \
          subversion

    - name: Clone OpenWrt source
      run: |
        git clone https://github.com/openwrt/openwrt.git openwrt-source
        cd openwrt-source
        git checkout v${{ env.OPENWRT_VERSION }}

    - name: Setup feeds and basic config
      run: |
        cd openwrt-source
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # 基础配置
        echo "CONFIG_TARGET_mediatek=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic_${{ env.SUBTARGET }}=y" >> .config
        echo "CONFIG_TARGET_mediatek_filogic_${{ env.SUBTARGET }}_360t7=y" >> .config
        echo "CONFIG_PACKAGE_luci=y" >> .config
        echo "CONFIG_PACKAGE_nftables=y" >> .config
        echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" >> .config
        
        make defconfig

    - name: Add custom package
      run: |
        cd $GITHUB_WORKSPACE
        echo "Current directory: $(pwd)"
        echo "Contents of current directory:"
        ls -la
        
        # 创建包目录
        mkdir -p ../openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}
        
        # 复制所有文件到包目录（排除.git等隐藏文件）
        find . -maxdepth 1 -type f -not -name ".*" -exec cp {} ../openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/ \;
        
        # 复制需要的目录
        for dir in src root test luasrc; do
          if [ -d "$dir" ]; then
            cp -r "$dir" ../openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/
          fi
        done
        
        echo "Package contents:"
        ls -la ../openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}/

    - name: Verify Makefile exists
      run: |
        cd ../openwrt-source/package/network/services/${{ env.PACKAGE_NAME }}
        if [ ! -f "Makefile" ]; then
          echo "❌ Error: Makefile not found in package directory!"
          ls -la
          exit 1
        fi
        echo "✅ Makefile found and verified"

    - name: Download sources
      run: |
        cd ../openwrt-source
        make download -j$(nproc)

    - name: Build only the required package
      run: |
        cd ../openwrt-source
        echo "Compiling ${{ env.PACKAGE_NAME }} and dependencies..."
        
        # 只编译必要的工具链和依赖
        make tools/install -j$(nproc)
        make toolchain/install -j$(nproc)
        
        # 编译nftables依赖
        make package/nftables/compile -j$(nproc)
        
        # 编译LuCI基础
        make package/luci/compile -j$(nproc)
        
        # 编译我们的包
        make package/network/services/${{ env.PACKAGE_NAME }}/compile V=s -j$(nproc)

    - name: Find and collect IPK files
      run: |
        cd ../openwrt-source
        echo "Searching for IPK files..."
        
        # 在主包目录查找
        IPK_FILE=$(find bin -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        
        if [ -z "$IPK_FILE" ]; then
          # 在packages目录查找
          IPK_FILE=$(find bin/packages -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        fi
        
        if [ -f "$IPK_FILE" ]; then
          echo "✅ Found: $IPK_FILE"
          mkdir -p ../output
          cp "$IPK_FILE" ../output/
          
          # 同时复制nftables的依赖包（如果需要）
          NFTABLES_IPK=$(find bin -name "*nftables*.ipk" | head -n 1)
          if [ -f "$NFTABLES_IPK" ]; then
            cp "$NFTABLES_IPK" ../output/
            echo "Also copied nftables dependency"
          fi
        else
          echo "❌ IPK file not found"
          echo "Available IPK files:"
          find . -name "*.ipk" | head -20
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-ipk
        path: output/*.ipk

    - name: Show success message
      run: |
        echo "=========================================="
        echo "✅ Build successful!"
        echo "📦 Package: ${{ env.PACKAGE_NAME }}"
        echo "🎯 For: 360T7 (MT7981)"
        echo "📋 Dependencies: nftables"
        echo "📁 IPK files are available in artifacts"
        echo "=========================================="
