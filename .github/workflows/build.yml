name: Build luci-app-kidcontrol for 360T7 (filogic)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  PACKAGE_NAME: luci-app-kidcontrol
  OPENWRT_VERSION: "24.10.1"
  TARGET: "mediatek/filogic"

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib gettext git libncurses5-dev libssl-dev python3 rsync unzip zlib1g-dev file wget curl

    - name: Determine SDK URL
      run: |
        # 使用官方镜像路径
        MIRROR_URL="https://mirror-03.infra.openwrt.org/releases"
        # 或者使用主下载站点（备用）
        # MIRROR_URL="https://downloads.openwrt.org/releases"
        
        # 构建SDK下载链接
        SDK_FILENAME="openwrt-sdk-24.10.1-mediatek-filogic_gcc-14.2.0_musl.Linux-x86_64.tar.xz"
        SDK_URL="$MIRROR_URL/${{ env.OPENWRT_VERSION }}/targets/${{ env.TARGET }}/$SDK_FILENAME"
        
        echo "SDK_URL=$SDR_URL" >> $GITHUB_ENV
        echo "SDK_FILENAME=$SDK_FILENAME" >> $GITHUB_ENV
        echo "MIRROR_URL=$MIRROR_URL" >> $GITHUB_ENV
        echo "Building for 360T7 (Filogic) with OpenWrt ${{ env.OPENWRT_VERSION }}"
        echo "SDK download URL: $SDK_URL"

    - name: Download and Extract OpenWrt SDK
      run: |
        cd $GITHUB_WORKSPACE
        echo "Downloading SDK from: ${{ env.SDK_URL }}"
        
        # 尝试从镜像站下载
        if ! wget --progress=dot:giga ${{ env.SDK_URL }} -O sdk.tar.xz; then
          echo "Mirror failed, trying main download site..."
          MAIN_URL="https://downloads.openwrt.org/releases/${{ env.OPENWRT_VERSION }}/targets/${{ env.TARGET }}/${{ env.SDK_FILENAME }}"
          if ! wget --progress=dot:giga $MAIN_URL -O sdk.tar.xz; then
            echo "Error: Failed to download SDK from both sources"
            echo "Please check if the SDK exists at:"
            echo "https://downloads.openwrt.org/releases/${{ env.OPENWRT_VERSION }}/targets/${{ env.TARGET }}/"
            exit 1
          fi
        fi
        
        mkdir -p openwrt-sdk
        tar -xf sdk.tar.xz -C openwrt-sdk --strip-components=1
        rm -f sdk.tar.xz
        echo "SDK extracted successfully"
        ls -la openwrt-sdk/

    - name: Verify SDK architecture
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        echo "SDK target architecture:"
        cat .config | grep TARGET_ARCH_PACKAGES || true
        cat .config | grep CONFIG_TARGET_ || true
        echo "SDK info:"
        ./staging_dir/host/bin/opkg --version || true

    - name: Prepare Package in SDK
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        # 清除可能存在的旧包
        rm -rf package/${{ env.PACKAGE_NAME }}
        
        # 创建包目录并复制所有必要文件
        mkdir -p package/${{ env.PACKAGE_NAME }}
        cd package/${{ env.PACKAGE_NAME }}
        
        # 复制项目中的所有文件（除了.git等）
        cp -r $GITHUB_WORKSPACE/* .
        
        # 清理不需要的文件
        rm -rf .github .git* .vscode README.md LICENSE 2>/dev/null || true
        
        echo "Package contents:"
        ls -la

    - name: Update Feeds
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Configure SDK for package
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        # 生成默认配置
        make defconfig
        
        # 启用我们的包
        echo "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}=m" >> .config
        
        # 重新应用配置
        make defconfig
        
        echo "Current package configuration:"
        grep "CONFIG_PACKAGE_${{ env.PACKAGE_NAME }}" .config || echo "Package configuration not found"

    - name: Check package dependencies
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        echo "Checking package dependencies..."
        make package/${{ env.PACKAGE_NAME }}/check V=s || echo "Dependency check completed"

    - name: Compile the Package
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        echo "Starting compilation..."
        make package/${{ env.PACKAGE_NAME }}/compile V=s -j$(($(nproc) + 1))

    - name: Find Compiled Package
      run: |
        cd $GITHUB_WORKSPACE/openwrt-sdk
        echo "Searching for compiled IPK files..."
        
        # 在多个可能的位置查找
        IPK_PATH=$(find . -name "*${{ env.PACKAGE_NAME }}*.ipk" | head -n 1)
        
        if [ -f "$IPK_PATH" ]; then
          echo "✅ Found IPK: $IPK_PATH"
          mkdir -p $GITHUB_WORKSPACE/output
          cp "$IPK_PATH" $GITHUB_WORKSPACE/output/
          echo "PACKAGE_PATH=output/$(basename "$IPK_PATH")" >> $GITHUB_ENV
          
          # 显示IPK信息
          echo "IPK file info:"
          ls -la "$IPK_PATH"
        else
          echo "❌ Error: IPK file not found!"
          echo "Searching in all directories:"
          find . -name "*.ipk" -type f | head -20
          echo "Build directory contents:"
          find . -name "build_dir*" -type d | head -5
          exit 1
        fi

    - name: Upload IPK as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}-${{ env.OPENWRT_VERSION }}-filogic
        path: $GITHUB_WORKSPACE/output/*.ipk

    - name: Show Build Summary
      run: |
        echo "=========================================="
        echo "🎉 Build completed successfully!"
        echo "📦 Package: ${{ env.PACKAGE_NAME }}"
        echo "🔄 OpenWrt: ${{ env.OPENWRT_VERSION }}"
        echo "🎯 Target: ${{ env.TARGET }} (360T7)"
        echo "📁 Output: ${{ env.PACKAGE_PATH }}"
        echo "=========================================="
